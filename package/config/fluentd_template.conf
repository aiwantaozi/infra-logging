# cluster log
<source>
   @type  monitor_agent
   bind  0.0.0.0
   port  24220
</source>

<source>
   @type  tail
   path  /var/log/containers/*.log
   pos_file  /fluentd/etc/log/fluentd-cluster-logging.pos
   time_format  %Y-%m-%dT%H:%M:%S
   tag  cluster.*
   format  json
   read_from_head  true
</source>

<filter  cluster.**>
   @type  kubernetes_metadata
   merge_json_log  true
   preserve_json_log  true
</filter>

<filter cluster.**>
  @type record_transformer
  <record>
    tag ${tag}
    {{range $k, $val := .clusterTarget.OutputTags -}}
    {{$k}} {{$val}}
    {{end -}}
  </record>
</filter>

{{ if .clusterTarget.FluentdMatchType }}
<match  cluster.**> 
    @type {{.clusterTarget.FluentdMatchType}}
    {{ if eq .clusterTarget.TargetType "embedded"}}
    flush_interval 2s
    include_tag_key  true
    host "elasticsearch.cattle-system"
    port 9200
    scheme "http"
    reload_connections "true"
    logstash_prefix "clusterid-cattle-system"
    logstash_format true
    logstash_dateformat  "%Y.%m.%d"
    type_name  "container_log"
    {{end -}}

    {{ if eq .clusterTarget.TargetType "elasticsearch"}}
    flush_interval {{.clusterTarget.OutputFlushInterval}}s
    include_tag_key  true
    host {{.clusterTarget.ESHost}}
    port {{.clusterTarget.ESPort}}
    scheme "http"
    reload_connections "true"
    logstash_prefix "{{.clusterTarget.ESLogstashPrefix}}"
    logstash_format true
    logstash_dateformat  {{.clusterTarget.ESLogstashDateformat}}
    type_name  "container_log"
    {{end -}}

    {{ if eq .clusterTarget.TargetType "splunk"}}
    server  {{.clusterTarget.SplunkHost}}:{{.clusterTarget.SplunkPort}}
    flush_interval {{.clusterTarget.OutputFlushInterval}}s
    all_items true
    protocol {{.clusterTarget.SplunkProtocol}}
    sourcetype {{.clusterTarget.SplunkSourceType}}
    time_format {{.clusterTarget.SplunkTimeFormat}}
    format json
    reload_connections "true"
    {{end -}}

    {{ if eq .clusterTarget.TargetType "kafka"}}
    {{ if eq .clusterTarget.KafkaBrokerType "zookeeper" }}
    zookeeper {{.clusterTarget.KafkaZookeeper}}
    {{else}}
    brokers {{.clusterTarget.KafkaBrokers}}
    {{end}}
    default_topic {{.clusterTarget.KafkaDefaultTopic}}
    output_data_type  {{.clusterTarget.KafkaOutputDataType}}
    output_include_tag true
    output_include_time true
    # get_kafka_client_log  true
    max_send_retries  {{.clusterTarget.KafkaMaxSendRetries}}
    {{end -}}


    {{ if eq .clusterTarget.Secret.TargetType .clusterTarget.TargetType }}
    {{ if .clusterTarget.Secret.Label -}}
    <{{.clusterTarget.Secret.Label}}>
    {{end -}}

    {{range $j, $dt := .clusterTarget.Secret.Data -}}
    {{ if ne $dt "" -}}
    {{$j}} {{$dt}}
    {{end -}}
    {{end -}}

    {{ if .clusterTarget.Secret.Label -}}
    </{{.clusterTarget.Secret.Label}}>
    {{end -}}
    {{end -}}

    buffer_type file
    buffer_path /fluentd/etc/buffer/cluster.buffer
    buffer_queue_limit 128
    buffer_chunk_limit 256m
    max_retry_wait 30
    disable_retry_limit
    num_threads 8
    slow_flush_log_threshold 40.0
</match>

{{end -}}

# namespace log
{{range $i, $store := .nsTargets -}}
<source>
   @type  tail
   path  /var/log/containers/*.log
   pos_file  /fluentd/etc/log/fluentd-namespace-{{$store.Namespace}}-logging.pos
   time_format  %Y-%m-%dT%H:%M:%S
   tag  {{$store.Namespace}}.*
   format  json
   read_from_head  true
</source>

<filter  {{$store.Namespace}}.**>
   @type  kubernetes_metadata
   merge_json_log  true
   preserve_json_log  true
</filter>

<filter {{$store.Namespace}}.**>
  @type record_transformer
  enable_ruby  true
  <record>
    tag ${tag}
    namespace ${record["kubernetes"]["namespace_name"]}
    {{range $k, $val := $store.OutputTags -}}
    {{$k}} {{$val}}
    {{end -}}
  </record>
</filter>

<filter {{$store.Namespace}}.**>
  @type grep
  <regexp>
    key namespace
    pattern {{$store.Namespace}}
  </regexp>
</filter>

<filter {{$store.Namespace}}.**>
  @type record_transformer
  remove_keys namespace
</filter>

<match  {{$store.Namespace}}.**> 
    @type {{$store.FluentdMatchType}}
    flush_interval {{$store.Target.OutputFlushInterval}}s
    {{ if eq $store.Target.TargetType "elasticsearch"}}
    include_tag_key  true
    host {{$store.Target.ESHost}}
    port {{$store.Target.ESPort}}
    scheme "http"
    reload_connections "true"
    logstash_prefix "{{$store.Target.ESLogstashPrefix}}"
    logstash_format true
    logstash_dateformat  {{$store.Target.ESLogstashDateformat}}
    type_name  "container_log"
    {{end -}}

    {{ if eq $store.Target.TargetType "splunk"}}
    server  {{$store.Target.SplunkHost}}:{{$store.Target.SplunkPort}}
    all_items true
    protocol {{$store.Target.SplunkProtocol}}
    sourcetype {{$store.Target.SplunkSourceType}}
    time_format {{$store.Target.SplunkTimeFormat}}
    format json
    reload_connections "true"
    {{end -}}

    {{ if eq $store.Target.TargetType "kafka"}}
    {{ if eq $store.Target.KafkaBrokerType "zookeeper" }}
    zookeeper {{$store.Target.KafkaZookeeper}}
    {{else}}
    brokers {{$store.Target.KafkaBrokers}}
    {{end}}
    default_topic {{$store.Target.KafkaDefaultTopic}}
    output_data_type  {{$store.Target.KafkaOutputDataType}}
    output_include_tag  true
    output_include_time  true
    # get_kafka_client_log  true
    max_send_retries  {{$store.Target.KafkaMaxSendRetries}}
    {{end -}}
    
    {{ if eq $store.Secret.TargetType $store.Target.TargetType }}
    {{ if $store.Secret.Label -}}
    <{{$store.Secret.Label}}>
    {{end -}}
        {{range $j, $dt := $store.Secret.Data -}}
    {{ if ne $dt "" -}}
    {{$j}} {{$dt}}
    {{end -}}
        {{end -}}
    {{ if $store.Secret.Label -}}
    </{{$store.Secret.Label}}>
    {{end -}}
    {{end -}}

    max_retry_wait 30
    disable_retry_limit
    num_threads 8
    buffer_type file
    buffer_path /fluentd/etc/buffer/namespace.{{$store.Namespace}}.buffer
    buffer_queue_limit 128
    buffer_chunk_limit 256m
    slow_flush_log_threshold 40.0
</match>
{{end -}}

# service log
<source>
  @type tail
  path /var/log/volumes/*/*/*/apache2/* # path is /var/log/volumes/<namespace>/<stack>/<service>/<type>/*.log
  pos_file /fluentd/etc/log/apache2.log.pos
  tag servicelog.*
  format /^(?<host>[^ ]*) [^ ]* (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^ ]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)?$/ 
  time_format %d/%b/%Y:%H:%M:%S %z
</source>

<source>
  @type tail
  path /var/log/volumes/*/*/*/nginx/* # path is /var/log/volumes/<namespace>/<stack>/<service>/<type>/*.log
  pos_file /fluentd/etc/log/nginx.log.pos
  tag servicelog.*
  format /^(?<remote>[^ ]*) (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)") (?<gzip_ratio>[^ ]*)?$/
  time_format %d/%b/%Y:%H:%M:%S %z
</source>

<source>
  @type tail
  path /var/log/volumes/*/*/*/syslog/* # path is /var/log/volumes/<namespace>/<stack>/<service>/<type>/*.log
  pos_file /fluentd/etc/log/syslog.log.pos
  tag servicelog.*
  format syslog
</source>

<source>
  @type tail
  path /var/log/volumes/*/*/*/json/* # path is /var/log/volumes/<namespace>/<stack>/<service>/<type>/*.log
  pos_file /fluentd/etc/log/json.log.pos
  tag servicelog.*
  format json
</source>

<filter servicelog.**>
  @type record_transformer
  <record>
    tag ${tag}
    namespace ${tag_parts[4]}
    stack_name ${tag_parts[5]}
    service_name ${tag_parts[6]}
    log_format ${tag_parts[7]}
  </record>
</filter>

{{range $i, $store := .nsTargets -}}
<match  servicelog.var.log.volumes.{{$store.Namespace}}.**>
  @type {{$store.FluentdMatchType}}
  flush_interval {{$store.Target.OutputFlushInterval}}s
  {{ if eq $store.Target.TargetType "elasticsearch"}}
  include_tag_key  true
  host {{$store.Target.ESHost}}
  port {{$store.Target.ESPort}}
  scheme "http"
  reload_connections "true"
  logstash_prefix "{{$store.Target.ESLogstashPrefix}}"
  logstash_format true
  logstash_dateformat  {{$store.Target.ESLogstashDateformat}}
  type_name  "service_log"
  {{end -}}

  {{ if eq $store.Target.TargetType "splunk"}}
  server  {{$store.Target.SplunkHost}}:{{$store.Target.SplunkPort}}
  all_items true
  protocol {{$store.Target.SplunkProtocol}}
  sourcetype {{$store.Target.SplunkSourceType}}
  time_format {{$store.Target.SplunkTimeFormat}}
  format json
  reload_connections "true"
  {{end -}}

  {{ if eq $store.Target.TargetType "kafka"}}
  {{ if eq $store.Target.KafkaBrokerType "zookeeper" }}
  zookeeper  {{$store.Target.KafkaZookeeper}}
  {{else}}
  brokers  {{$store.Target.KafkaBrokers}}
  {{end}}
  default_topic  {{$store.Target.KafkaDefaultTopic}}
  output_data_type  {{$store.Target.KafkaOutputDataType}}
  output_include_tag true
  output_include_time   true
  # get_kafka_client_log  true
  max_send_retries  {{$store.Target.KafkaMaxSendRetries}}
  {{end -}}
  
  {{ if eq $store.Secret.TargetType $store.Target.TargetType }}
  {{ if $store.Secret.Label -}}
  <{{$store.Secret.Label}}>
  {{end -}}
      {{range $j, $dt := $store.Secret.Data -}}
  {{ if ne $dt "" -}}
  {{$j}} {{$dt}}
  {{end -}}
      {{end -}}
  {{ if $store.Secret.Label -}}
  </{{$store.Secret.Label}}>
  {{end -}}
  {{end -}}
  
  buffer_type file
  buffer_path /fluentd/etc/buffer/service.{{$store.Namespace}}.buffer
  buffer_queue_limit 128
  buffer_chunk_limit 256m
  max_retry_wait 30
  disable_retry_limit
  num_threads 8
  slow_flush_log_threshold 40.0
</match>
{{end -}}