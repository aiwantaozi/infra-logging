<source>
   @type  tail
   path  /var/log/containers/*.log
   pos_file  /fluentd/etc/fluentd-cluster-logging.pos
   time_format  %Y-%m-%dT%H:%M:%S
   tag  kubernetes.*
   format  json
   read_from_head  true
</source>
<source>
   @type  monitor_agent
   bind  0.0.0.0
   port  24220
</source>
<filter  kubernetes.**>
   @type  kubernetes_metadata
   merge_json_log  true
   preserve_json_log  true
</filter>

{{range $i, $store := .allTargets -}}
{{if eq $store.Namespace "cattle-system"}}
  <filter kubernetes.**>
    <record>
    {{range $k, $v := $store.Target.OutputTags -}}
      {{$k}} {{$v}}
    {{end -}}
    <record>
  </filter>
{{else}}  
  <filter servicelog.var.log.volumes.{{$store.Namespace}}.**>
    <record>
    {{range $k, $v := $store.Target.OutputTags -}}
      {{$k}} {{$v}}
    {{end -}}
    <record>
  </filter>
{{end -}}
{{end -}}

<match  kubernetes.**>         
    @type  copy        
    {{range $i, $store := .allTargets -}}
    {{ if eq $store.Target.TargetType "elasticsearch"}}
      <store>
        @type {{$store.Target.TargetType}}
        flush_interval {{$store.Target.OutputFlushInterval}}s

        include_tag_key  {{$store.Target.ESIncludeTagKey}}
        host {{$store.Target.ESHost}}
        port {{$store.Target.ESPort}}
        scheme "http"
        reload_connections "true"
        logstash_prefix "{{$store.Target.ESLogstashPrefix}}"
        logstash_format {{$store.Target.ESLogstashFormat}}
        logstash_dateformat  {{$store.Target.ESLogstashDateformat}}
        type_name  "container_log"
        buffer_chunk_limit 2M
        buffer_queue_limit 32
       
        max_retry_wait 30
        disable_retry_limit
        num_threads 8
        {{ if $store.Secret.Label -}}
        <{{$store.Secret.Label}}>
        {{end -}}
        {{range $j, $dt := $store.Secret.Data -}}
            {{$j}} {{$dt}}
        {{end -}}
        {{ if $store.Secret.Label -}}
        </{{$store.Secret.Label}}>
        {{end -}}
    {{end -}}

    {{ if eq $store.Target.TargetType "splunk-http-eventcollector"}}
      <store>
        @type {{$store.Target.TargetType}}
        flush_interval {{$store.Target.OutputFlushInterval}}s

        server  {{$store.Target.SplunkHost}}:{{$store.Target.SplunkPort}}
        all_items true
        protocol {{$store.Target.SplunkProtocol}}
        sourcetype {{$store.Target.SplunkSourceType}}
        time_format {{$store.Target.SplunkTimeFormat}}
        format json
        reload_connections "true"
        buffer_type memory
        buffer_queue_limit 16
        buffer_chunk_limit 8m
        
        {{ if $store.Secret.Label -}}
        <{{$store.Secret.Label}}>
        {{end -}}
        {{range $j, $dt := $store.Secret.Data -}}
            {{$j}} {{$dt}}
        {{end -}}
        {{ if $store.Secret.Label -}}
        </{{$store.Secret.Label}}>
        {{end -}}
    </store>
    {{end -}}

    {{end -}}
</match>

# service log
<source>
  @type tail
  path /var/log/volumes/*/*/*/apache2/* # path is /var/log/volumes/<namespace>/<stack>/<service>/<type>/*.log
  pos_file /fluentd/etc/apache2.log.pos
  tag servicelog.*
  format apache2
</source>

<source>
  @type tail
  path /var/log/volumes/*/*/*/nginx/* # path is /var/log/volumes/<namespace>/<stack>/<service>/<type>/*.log
  pos_file /fluentd/etc/nginx.log.pos
  tag servicelog.*
  format nginx
</source>

<source>
  @type tail
  path /var/log/volumes/*/*/*/syslog/* # path is /var/log/volumes/<namespace>/<stack>/<service>/<type>/*.log
  pos_file /fluentd/etc/syslog.log.pos
  tag servicelog.*
  format syslog
</source>

<filter servicelog.**>
  @type record_transformer
  <record>
    tag ${tag}
    namespace ${tag_parts[4]}
    stack_name ${tag_parts[5]}
    service_name ${tag_parts[6]}
    log_format ${tag_parts[7]}
  </record>
</filter>

{{range $i, $store := .allTargets -}}
{{if ne $store.Namespace "cattle-system"}}
<match  servicelog.var.log.volumes.{{$store.Namespace}}.**>
    @type {{$store.Target.TargetType}}
    flush_interval {{$store.Target.OutputFlushInterval}}s

    {{ if eq $store.Target.TargetType "elasticsearch"}}
    include_tag_key  {{$store.Target.ESIncludeTagKey}}
    host {{$store.Target.ESHost}}
    port {{$store.Target.ESPort}}
    scheme "http"
    reload_connections "true"
    logstash_prefix "{{$store.Target.ESLogstashPrefix}}"
    logstash_format {{$store.Target.ESLogstashFormat}}
    logstash_dateformat  {{$store.Target.ESLogstashDateformat}}
    type_name  "service_log"
    buffer_chunk_limit 2M
    buffer_queue_limit 32
    
    max_retry_wait 30
    disable_retry_limit
    num_threads 8
    {{end -}}

    {{ if eq $store.Target.TargetType "splunk-http-eventcollector"}}
    server  {{$store.Target.SplunkHost}}:{{$store.Target.SplunkPort}}
    all_items true
    protocol {{$store.Target.SplunkProtocol}}
    sourcetype {{$store.Target.SplunkSourceType}}
    time_format {{$store.Target.SplunkTimeFormat}}
    format json
    reload_connections "true"
    buffer_type memory
    buffer_queue_limit 16
    buffer_chunk_limit 8m
    {{end -}}
    
    {{ if $store.Secret.Label -}}
    <{{$store.Secret.Label}}>
    {{end -}}
        {{range $j, $dt := $store.Secret.Data -}}
            {{$j}} {{$dt}}
        {{end -}}
    {{ if $store.Secret.Label -}}
    </{{$store.Secret.Label}}>
    {{end -}}
</match>
{{end -}}
{{end -}}

# fluentd monitor config
<source>
   @type  monitor_agent
   bind  0.0.0.0
   port  24220
</source>
# output the fluentd log to container
<match fluent.**>
  @type stdout
</match>